// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Contact {
  id               String          @id @default(uuid())
  name             String
  marketingConsent Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relaciones
  emails           ContactEmail[]
  phones           ContactPhone[]
}

model ContactEmail {
  id        String   @id @default(uuid())
  contactId String
  email     String   @unique
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([email])
}

model ContactPhone {
  id        String   @id @default(uuid())
  contactId String
  phone     String   @unique
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([phone])
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email])
}

model Admin {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([email])
}


model EmailCampaign {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  sentAt     DateTime?
  emailsSent Int      @default(0)  // Total de emails enviados en esta campaña
}

model SmsCampaign {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  sentAt    DateTime?
  smsSent   Int      @default(0)  // Total de SMS enviados en esta campaña
}

model Payment {
  id              String    @id @default(uuid())
  projectCode     String    @unique @default(cuid()) // Código corto para el cliente
  accessToken     String    @unique @default(uuid()) // Token seguro para URLs
  email           String
  name            String
  planName        String
  totalAmount     Int       // Total en centavos
  firstPayment    Int       // Primer pago en centavos
  secondPayment   Int       // Segundo pago en centavos
  firstPaid       Boolean   @default(false)
  secondPaid      Boolean   @default(false)
  firstSessionId  String?   // Stripe session ID del primer pago
  secondSessionId String?   // Stripe session ID del segundo pago
  
  // Datos del proyecto
  projectStatus   String    @default("pending") // pending, in_progress, ready_for_payment, completed
  projectNotes    String?   // Notas internas
  
  // Fechas importantes
  firstPaidAt     DateTime?
  secondPaidAt    DateTime?
  projectStarted  DateTime?
  projectReady    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  termsAcceptance TermsAcceptance?

  @@index([email])
  @@index([projectCode])
  @@index([accessToken])
}

model TermsAcceptance {
  id           String   @id @default(cuid())
  userId       String?
  paymentId    String?   @unique // opcional si quieres ligarlo a un pago
  plan         String?
  acceptedAt   DateTime
  ipAddress    String?
  userAgent    String?
  termsVersion String

  payment      Payment?  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

